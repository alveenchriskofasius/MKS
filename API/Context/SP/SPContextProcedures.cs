// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using API.SP;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace API.Context.SP
{
    public partial class SPContext
    {
        private ISPContextProcedures _procedures;

        public virtual ISPContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new SPContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ISPContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<uspUserAddResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<uspUserLoginResult>().HasNoKey().ToView(null);
        }
    }

    public partial class SPContextProcedures : ISPContextProcedures
    {
        private readonly SPContext _context;

        public SPContextProcedures(SPContext context)
        {
            _context = context;
        }

        public virtual async Task<List<uspUserAddResult>> uspUserAddAsync(string FullName, string PhoneNumber, string UserName, string Email, string Password, bool? Active, string KTP, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FullName",
                    Size = 50,
                    Value = FullName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhoneNumber",
                    Size = 20,
                    Value = PhoneNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 20,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Email",
                    Size = 50,
                    Value = Email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Password",
                    Size = 20,
                    Value = Password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Active",
                    Value = Active ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "KTP",
                    Size = 20,
                    Value = KTP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<uspUserAddResult>("EXEC @returnValue = [dbo].[uspUserAdd] @FullName, @PhoneNumber, @UserName, @Email, @Password, @Active, @KTP", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<uspUserLoginResult>> uspUserLoginAsync(string Username, string Password, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Username",
                    Size = 20,
                    Value = Username ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Password",
                    Size = 20,
                    Value = Password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<uspUserLoginResult>("EXEC @returnValue = [dbo].[uspUserLogin] @Username, @Password", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
